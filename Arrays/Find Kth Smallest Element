##Kth smallest element##
------------------------
                        
Problems
Given an array arr[] and a number K where K is smaller than size of array, the task is to find the Kth smallest element in the given array. It is given that all array elements are distinct.

Input:
The first line of input contains an integer T, denoting the number of testcases. Then T test cases follow. Each test case consists of three lines. First line of each testcase contains an integer N denoting size of the array. Second line contains N space separated integer denoting elements of the array. Third line of the test case contains an integer K.

Output:
Corresponding to each test case, print the kth smallest element in a new line.

Expected Time Complexity: O(N).
Expected Auxiliary Space: O(1).

Constraints:
1 <= T <= 100
1 <= N <= 105
1 <= arr[i] <= 105
1 <= K <= N

Example:
Input:
2
6
7 10 4 3 20 15
3
5
7 10 4 20 15
4
Output:
7
15

Explanation:
Testcase 1: 3rd smallest element in the given array is 7.
Testcase 2: 4th smallest elemets in the given array is 15.

Code : 
/*package whatever //do not write package name here */

import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
    static int len=0;
	public static void main (String[] args) throws IOException {
		InputStreamReader   ir  =   new InputStreamReader(System.in);
		BufferedReader      br  =   new BufferedReader(ir);
		
		String secArr[];
		int k;
		int arr[];
		
		int testCases = Integer.parseInt(br.readLine());
		while (testCases > 0) {
		    String arrStr;
		    len =   Integer.parseInt(br.readLine());
		    arrStr  =   br.readLine();
		    secArr  =   arrStr.split(" ");
		    arr     =   stringToInteger(secArr, len);
		    
		    k   =   Integer.parseInt(br.readLine()); 
		    
		    System.out.println(kthSmallestElement(arr, 0, len-1, k));
		    //display(arr, len);
		    --testCases;
		}
	}
	
	public static int[] stringToInteger(String arr[], int len) {
	    int arrInt[] = new int[len];
	    for(int i=0; i<len; i++){
	        arrInt[i] = Integer.parseInt(arr[i]);
	    }
	    return arrInt;
	}
	
	public static int[] median(int arr[], int p, int r, int len) {
		int medSize  = (len-1)/5+1;
		int median[] = new int[(int)(medSize)];
		int i;
		//System.out.println("MedSize-->"+medSize);
		for(i=0; i<medSize-1; i++) {
			Arrays.sort(arr, p+i*5, (p+i*5)+5);
			//display(arr, len);
			median[i] = arr[p+i*5+2];
		}
		if(i*5<len) {
			Arrays.sort(arr, p+i*5, p+i*5+(int)Math.ceil((len-i*5)));
			median[i] = arr[p+i*5 + (len-i*5)/2];
		}
		//display(median, medSize);
		return median;
	}
	
	public static int kthSmallestElement(int arr[], int p, int r, int k) {
	    
		//if (k > 0 && k <= r - p + 1)  { 
			int median[] = median(arr, p, r, r-p+1);
	        int medOfMed = median[(median.length-1)/2];
	        int pivot = partition(arr, p, r, medOfMed);
	        //display(arr, len);
	        //System.out.println("MedOfMed-->"+pivot);
	        //if(p<r) {
	        if(pivot == (k-1)) return arr[pivot];
	        else if(pivot<(k-1)) {
	        	return kthSmallestElement(arr, pivot+1, r, k);
	        }
	        else 
	        	return kthSmallestElement(arr, p, pivot-1, k);
	        //}
//	    }
//		return 0;
	}
	
//	public static int randomPartition(int arr[], int l, int r) 
//    { 
//        int n = r-l+1; 
//        int pivot = (int)(Math.random()) * (n-1); 
//        swap(arr, l + pivot, r); 
//        return partition(arr, l, r); 
//    } 
	
	static void swap(int arr[], int i, int j) 
    { 
        int temp = arr[i]; 
        arr[i] = arr[j]; 
        arr[j] = temp; 
    } 
	
	public static int partition(int arr[], int p, int r, int x) {
		int i; 
	    for (i = p; i < r; i++) 
	        if (arr[i] == x) 
	        break; 
	    swap(arr, i, r); 
	    
	    i = p;
	    
	    for(int j=p; j<=r-1; j++) {
	        if(arr[j]<=x) {
	            int temp    =   arr[i];
	            arr[i]      =   arr[j];
	            arr[j]      =   temp;
	            ++i;
	        }
	    }
	    int temp    =   arr[i];
        arr[i]    =   arr[r];
        arr[r]      =   temp;
        
        //System.out.println("i-->"+i);
	    return i;
	}
	
	public static void display(int arr[], int len) {
		for(int i=0; i<len; i++) {
			System.out.print(arr[i]+" ");
		}
		System.out.println("");
	}
}

Submit your code here : https://practice.geeksforgeeks.org/problems/kth-smallest-element/0/
Reference : https://www.geeksforgeeks.org/kth-smallestlargest-element-unsorted-array-set-3-worst-case-linear-time/
