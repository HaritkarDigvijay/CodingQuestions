##Trapping Rain Water##
-----------------------
              
Problems
Given an array arr[] of N non-negative integers representing height of blocks at index i as Ai where the width of each block is 1. Compute how much water can be trapped in between blocks after raining.
Structure is like below:
|  |
|_|
We can trap 2 units of water in the middle gap.

Input:
The first line of input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case contains an integer N denoting the size of the array, followed by N space separated numbers to be stored in array.

Output:
Output the total unit of water trapped in between the blocks.

Constraints:
1 <= T <= 100
3 <= N <= 107
0 <= Ai <= 108

Example:
Input:
2
4
7 4 0 9
3
6 9 9

Output:
10
0

Explanation:
Testcase 1: Water trapped by block of height 4 is 3 units, block of height 0 is 7 units. So, total unit of water trapped is 10 units.

Code :
/*package whatever //do not write package name here */

import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
	public static void main (String[] args) throws IOException {
        InputStreamReader ir = new InputStreamReader(System.in);
        BufferedReader br = new BufferedReader(ir);
        String secArr[];
        int len;
        int arr[];
        int testCases = Integer.parseInt(br.readLine());
        while (testCases > 0) {
            String arrStr;
            len = Integer.parseInt(br.readLine());
            arrStr = br.readLine();
            secArr = arrStr.split(" ");
            arr = stringToInteger(secArr, len);
            System.out.println(trappingWater(arr, len));
            --testCases;
        }
    }
    public static int[] stringToInteger(String arr[], int len) {
        int arrInt[] = new int[len];
        for(int i=0; i<len; i++){
            arrInt[i] = Integer.parseInt(arr[i]);
        }
        return arrInt;
    }
    public static int trappingWater(int arr[], int len) {
        int leftArr[] = new int[len];
        int rightArr[] = new int[len];
        leftArr[0] = arr[0]; 
        rightArr[len-1] = arr[len-1];
        
        //Find max from left of the array
        for(int i=1; i<len; i++) {
            leftArr[i] = Math.max(arr[i], leftArr[i-1]);
        }
        
        //Find max from the right of the array
        for(int i=len-2; i>=0; i--) {
            rightArr[i] = Math.max(arr[i], rightArr[i+1]);
        }
        
        //calculate total water collected
        int sum = 0;
        for(int i=0; i<len; i++) {
            sum = sum + Math.min(rightArr[i], leftArr[i]) - arr[i];
        }
        return sum;
    }
    
    static void swap(int arr[], int i, int j) 
    { 
        int temp = arr[i]; 
        arr[i] = arr[j]; 
        arr[j] = temp; 
    } 
    
    static void print(Object value) {
        System.out.println("Value="+value);
    }
    
    public static void display(int arr[], int len) {
        for(int i=0; i<len; i++) {
            System.out.print(arr[i]+" ");
        }
        System.out.println("");
    }
}

Submit your solution here : https://practice.geeksforgeeks.org/problems/trapping-rain-water/0/
